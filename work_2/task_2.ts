// Задание 2. Объединение типов и массивов
/*
Что нужно сделать:
-Напишите типы, которыми можно будет корректно описать данные структуры, используя объединения в TypeScript.
-При выполнении задания обратите внимание на то, что лежит в переменных. 
const arr0 = [1, 2, 3] // number[]
*/

/*
const arr1 = [1, 2, 3, null];
const arr2 = ['safety', '=', true]
const arr3 = [
[1, 2, 3, 4, 5],
['1', '2', '3', '4', '5'],
]
const arr4 = [
1, 2, true, 'str', undefined
]

const arr5 = [
{
id: 1,
name: 'Студент',
},
{
id: 2,
name: 'Наставник',
}
]
*/

// Решение:
const arr1: (number | null)[] = [1, 2, 3, null];
const arr2: string[] = ["safety", "=", "true"]; // Исправлено:  'true' - строка, а не boolean.
const arr3: (number[] | string[])[] = [
  [1, 2, 3, 4, 5],
  ["1", "2", "3", "4", "5"],
];

const arr4: (number | boolean | string | undefined)[] = [
  1,
  2,
  true,
  "str",
  undefined,
];

const arr5: { id: number; name: string }[] = [
  {
    id: 1,
    name: "Студент",
  },
  {
    id: 2,
    name: "Наставник",
  },
];

// Дополнительное задание: Можно создать более точные типы для arr3, используя Tuple types:
const arr3_advanced: (
  | [number, number, number, number, number]
  | [string, string, string, string, string]
)[] = [
  [1, 2, 3, 4, 5],
  ["1", "2", "3", "4", "5"],
];

// Объяснение кода:
/*
1) Улучшения:
- arr1 - Тип (number | null)[] обозначает массив, который может содержать числа или null.
- arr2 - Тип string[] обозначает массив строк. Важно заметить, что 'true' в оригинальном массиве является строкой, а не булевым значением. Это критично для правильной типизации.
- arr3 - Тип (number[] | string[])[] означает, что массив может содержать массивы чисел или массивы строк. Это наиболее общее и корректное описание.
- arr4 - Тип (number | boolean | string | undefined)[] обозначает массив, который может содержать числа, булевы значения, строки или undefined.
- arr5 - Тип { id: number; name: string }[] обозначает массив объектов, где каждый объект имеет свойства id (число) и name (строка).
- arr3_advanced - Для arr3 можно было бы создать более конкретный тип, если требуется. Используется Tuple type ([number, number, number, number, number] и [string, string, string, string, string]). Это означает, что массив должен содержать либо массив из пяти чисел, либо массив из пяти строк, в строго определенном порядке. Это делает код более строгим и предотвращает ошибки, если, например, нужно добавить шестой элемент в один из вложенных массивов. Важно: Tuple types, как правило, применяются, когда кол-во элементов в массиве и их порядок известны и важны. Если порядок не важен, number[] | string[] будет лучшим решением.

2) Ключевые моменты:
- Объединение типов (|): Используется для указания, что переменная может иметь один из нескольких типов.
- Типизация массивов: [] означает массив.
- Типизация объектов: { key1: type1, key2: type2, ... } описывает структуру объекта.
- Строгость типизации: При выборе типа важно учитывать реальные значения, которые могут быть в массиве. Например, 'true' - это строка, а не boolean. Это ключевой момент для правильного выполнения задания.
- Tuple types (дополнительно): Представляют собой массивы фиксированного размера с предопределенными типами для каждого элемента. Могут быть полезны, когда порядок и количество элементов в массиве критичны.
*/
