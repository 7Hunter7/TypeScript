// Задание 3. Использование нетипизированного кода
/*
Представьте, что вас подключили к проекту, над которым работали другие разработчики. Вы увидели в коде проекта два фрагмента, назначение которых нигде не объяснено. Предположите, какую функцию выполняет каждая часть кода и для каких целей их надо применить.
*/

// Пeрвая часть кода:
// function someFunc(data) {
//   return data.reduce((acc, current) => {
//     acc + Number(current.age > 18 && current.isMale), 0);
//   };
// }

// Решение:
/*
1) Назначение: Вероятно, эта функция предназначена для подсчета количества совершеннолетних мужчин в массиве данных.

2) Аргументы: Функция принимает один аргумент data, который, как предполагается, является массивом объектов. Предположительно, каждый объект в массиве должен иметь свойства age (возраст) и isMale (логическое значение, указывающее, является ли человек мужчиной).

3) Логика: 
- Функция использует метод reduce для итерации по массиву data.
- На каждой итерации она проверяет, что current.age > 18 (возраст больше 18) и current.isMale (значение true).
- Результат этого логического выражения (либо true, либо false) преобразуется в число (1 или 0) с помощью Number().
- Это число должно добавляться к аккумулятору acc, который изначально равен 0.

4) Проблемы:
- Отсутствует типизация: Отсутствие типизации делает код сложным для понимания и подверженным ошибкам. Неясно, какой тип данных ожидает функция на входе и какие типы данных возвращаются.
- Неправильное использование reduce: reduce требует возвращать аккумулятор на каждой итерации. В текущем коде отсутствует return внутри коллбэка reduce, а так же отсутствует присваивание нового значения аккумулятору, что приведет к ошибке или неверному результату.
- Непонятные имена переменных: Имя someFunc не отражает назначение функции.
*/

// Вторая часть кода:
// type Human = {
//   name: string,
//   age: number,
//   gender: 'male' | 'female',
// }
// function someFunc(Human[]): number {
//   return data.reduce((acc: number, current: Human) => {
//     acc + Number(current.age > 18 && current.gender === 'male'), 0);
//   };
// }

// Решение:
/*
1) Назначение: Аналогично первой части кода, функция, вероятно, предназначена для подсчета количества совершеннолетних мужчин в массиве данных.

2) Аргументы:
- Функция принимает один аргумент data, который является массивом объектов типа Human.
- Тип Human определен как объект со свойствами name (строка), age (число) и gender (строка, принимающая значения ‘male’ или ‘female’).

3) Логика:
- Функция использует метод reduce для итерации по массиву data.
- На каждой итерации она проверяет, что current.age > 18 (возраст больше 18) и current.gender === 'male' (пол - мужской).
- Результат этого логического выражения (либо true, либо false) преобразуется в число (1 или 0) с помощью Number().
- Это число должно добавляться к аккумулятору acc, который изначально равен 0.

4) Преимущества:
- Типизация: Использование TypeScript и определение типа Human делает код более понятным и безопасным. TypeScript может проверить, что функция получает данные правильного формата и что свойства age и gender существуют и имеют правильные типы.
5) Проблемы:
Неправильное использование reduce: Такая же проблема, как и в первом случае. Внутри коллбэка reduce отсутствует return.
Исправленный код (TypeScript):
*/
type Human = {
  name: string;
  age: number;
  gender: "male" | "female";
};

function countAdultMales(data: Human[]): number {
  return data.reduce((acc: number, current: Human) => {
    return acc + Number(current.age > 18 && current.gender === "male");
  }, 0);
}

// Пример использования:
const people: Human[] = [
  { name: "Alice", age: 25, gender: "female" },
  { name: "Bob", age: 30, gender: "male" },
  { name: "Charlie", age: 17, gender: "male" },
  { name: "Diana", age: 22, gender: "female" },
  { name: "Eve", age: 40, gender: "male" },
];

const adultMaleCount = countAdultMales(people);
console.log(`Количество совершеннолетних мужчин: ${adultMaleCount}`); // 2
