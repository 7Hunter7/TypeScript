// Задание 6. Алгоритмическая задача — 2

/* Что нужно сделать:
Используя примитивную типизацию с помощью TypeScript, напишите код, который:
принимает число,
возвращает его цифровой корень.
Цифровой корень (также известен как корень по основанию 10) для положительного целого числа определяется как сумма его цифр до тех пор, пока не останется одна цифра.

Например, для числа 942 цифровой корень вычисляется следующим образом: 9 + 4 + 2 = 15, затем 1 + 5 = 6. Получается, что цифровой корень числа 942 равен 6. То же самое справедливо и для числа 493193: 4 + 9 + 3 + 1 + 9 + 3 = 29, затем 2 + 9 = 11, затем 1 + 1 = 2, поэтому цифровой корень числа 493193 равен 2.
*/

// Решение:
function digitalRoot(n: number): number {
  // Обрабатываем некорректный ввод (отрицательные числа). Это правило хорошего тона.
  if (n < 0) {
    throw new Error("Отрицательные числа не поддерживаются!");
  }

  // Базовый случай: если число уже однозначное, возвращаем его
  if (n < 10) {
    return n;
  }

  // Рекурсивно вычисляем сумму цифр, пока не получим однозначное число
  let sum: number = 0;
  const nStr: string = n.toString();
  for (let i: number = 0; i < nStr.length; i++) {
    sum += parseInt(nStr[i], 10);
  }

  return digitalRoot(sum);
}

// Проверка:
console.log(digitalRoot(942)); // 6
console.log(digitalRoot(493193)); // 2
console.log(digitalRoot(0)); // 0
console.log(digitalRoot(5)); // 5
console.log(digitalRoot(16)); // 7
console.log(digitalRoot(132189)); // 6

// Объяснение кода:
/*
1) Типизация:
- n: number - Указывает, что функция принимает число в качестве аргумента.
- : number - Указывает, что функция возвращает число.
- sum: number - Указывает, что переменная sum имеет тип number.
- nStr: string - Указывает, что переменная nStr имеет тип string.
- i: number - Указывает, что переменная i (индекс цикла) имеет тип number.

2) Обработка некорректного ввода:
- if (n < 0) { return NaN; } - Добавлена проверка на отрицательные числа, так как лучше явно обработать некорректный ввод.

3) Базовый случай (однозначное число):
- if (n < 10) { return n; } - Если число уже однозначное (меньше 10), то это и есть его цифровой корень и функция возвращает его.

4) Рекурсивное вычисление суммы цифр:
-let sum: number = 0; - Инициализирует переменную sum для хранения суммы цифр.
- const nStr: string = n.toString(); - Преобразует число в строку для удобного доступа к каждой цифре.
- for (let i: number = 0; i < nStr.length; i++) { sum += parseInt(nStr[i], 10); } - Итерируется по строке nStr, преобразует каждую цифру обратно в число (с помощью parseInt) и добавляет ее к sum.
- return digitalRoot(sum); - Рекурсивно вызывает функцию digitalRoot с полученной суммой sum, что позволяет повторять процесс вычисления суммы цифр до тех пор, пока не будет получено однозначное число.
*/
