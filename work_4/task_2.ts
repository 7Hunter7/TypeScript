// Задание 2. Наследование, абстрактные классы, геттеры и сеттеры
/*
Что нужно сделать:
- Создайте классы для товара и покупки, добавьте поля, методы и реализуйте логику скидок и транспортных расходов. Затем создайте массив из шести заказов и выведите детализацию в консоль. Далее отсортируйте заказы и снова выведите детализацию.

- Создайте базовый класс Product, который будет описывать товар и содержать поля с названием товара и его стоимости в рублях.
- Реализуйте поля в классе Product с помощью геттеров и сеттеров.
- Реализуйте метод log() в классе Product, который будет выводить параметры класса в консоль с разделителем «;».
- Создайте абстрактный базовый класс OrderItem, который будет описывать покупку товара и содержать поле с товаром и количеством заказанных единиц этого товара.
- Реализуйте поля в классе OrderItem с помощью геттеров и сеттеров.
- Реализуйте метод log() в классе OrderItem, который будет выводить параметры класса в консоль с разделителем «;». -Обратите внимание, что вам необходимо делегировать вывод информации о заказе классу Product.
- Реализуйте абстрактный метод getCost() в классе OrderItem, который будет возвращать стоимость заказа.
- Реализуйте метод compare(other: OrderItem), который будет сравнивать заказы и возвращать −1, 0 или 1 для сортировки.
- Реализуйте первый производный класс от OrderItem, который будет содержать скидку в цене (статическая скидка, например, 50 рублей). Реализуйте необходимые методы в этом классе так, чтобы скидка учитывалась корректно.
- Реализуйте второй производный класс от OrderItem, который будет содержать процент скидки и требования по количеству товара для применения скидки. Реализуйте методы в этом классе так, чтобы скидка учитывалась корректно и применялась только в случае, если в заказе содержится необходимое количество товара (более или равно 15) для применения скидки.
- Реализуйте третий производный класс от OrderItem, который будет содержать в себе транспортные расходы, указываемые на каждую единицу товара. Реализуйте методы в этом классе так, чтобы транспортные расходы учитывались корректно.
- Создайте массив из шести заказов с использованием разных классов: два первого типа, два второго типа, два третьего типа.
- Выведите детализацию заказов в консоль с помощью метода log().
- Отсортируйте заказы по убыванию с помощью метода compare(other).
- Выведите детализацию заказов в консоль с помощью метода log().

Примеры расчёта стоимости в подклассах:
Пусть скидка в цене — 50, цена — 300, количество — 2. Тогда стоимость равна (300 − 50) * 2 = 500.
Пусть процент скидки — 5,825, цена — 500, количество — 20, количество, которое надо превысить, — 15. Так как 20 ≥ 15, стоимость равна 500 * 20 * (1 − 5,825/100) = 9418 (стоимость по-прежнему целая).

Советы и рекомендации:
- Для каждого класса используйте отдельный .ts-файл. Хороший тон, когда название файла совпадает с именем класса внутри.
- Поэкспериментируйте с наследованием, чтобы кода было как можно меньше.
- Подкласс в имени должен содержать имя или по крайней мере ключевое слово суперкласса. Как правило, ключевое слово последнее.
- Подклассы не должны изменять поля базового класса. Можно вводить новые поля и переопределять методы.
*/

// Решение:
/*
1) Структура: 
- Каждый класс находится в отдельном файле.
- Файлы названы по именам их классов.

Файлы:
1) product.ts - class Product;
2) order-item.ts - abstract class OrderItem;
3) fixed-discount-order-item.ts - class FixedDiscountOrderItem extends OrderItem;
4) percentage-discount-order-item.ts - class PercentageDiscountOrderItem extends OrderItem;
5) shipping-order-item.ts - class ShippingOrderItem extends OrderItem;
6) main.ts:
- Создание продуктов;
- Создание заказов;
- Создание массива заказов;
- Сортировка заказов.

2) Наследование:
- В подклассах реализовано наследование.
- Производные классы расширяют OrderItem.

3) Реализация геттеров и сеттеров:
- Геттеры и сеттеры реализованы для всех приватных полей.

4) Абстрактный класс и метод: 
- OrderItem объявлен как абстрактный класс, а getCost()  объявлен как абстрактный метод. Это заставляет производные классы реализовывать getCost().

5) Метод compare(): 
- Метод compare() реализован для сортировки заказов по стоимости в порядке убывания. Возвращается 1, -1 или 0 в зависимости от запроса.

6) Логика скидок: 
- Логика скидок в FixedDiscountOrderItem и PercentageDiscountOrderItem соответствует примерам в подсказке. 
- PercentageDiscountOrderItem проверяет, соответствует ли количество минимальному требованию перед применением скидки, и использует Math.floor, чтобы обеспечить результат в виде целого числа.

7) Логика расчета стоимости доставки: 
- ShippingOrderItem рассчитывает общую стоимость, включая стоимость доставки каждого товара.

8) Реализация log(): 
- Методы log() реализованы во всех классах, включая вызов super.log() в производных классах для вывода информации базового класса. Это гарантирует, что будет выведена вся необходимая информация.

9) Безопасность типов: 
- Код полностью типизирован с использованием возможностей TypeScript для повышения качества кода и предотвращения возможных ошибок.

10) Рассчет стоимости: 
- Все классы рассчитывают стоимость в соответствии со спецификацией запроса, включая округление в меньшую сторону для PercentageDiscountOrderItem.

11) Пример: 
- В файле main.ts создан полный пример, который инстанцирует объекты всех классов, добавляет их в массив, регистрирует их (без сортировки), сортирует массив и снова регистрирует их (с сортировкой).
* Подродное описание смотри в файле main.ts.

12) Как запустить код:
1 - Установить TypeScript: `npm install -g typescript`;
2 - Файлы: product.ts, order-item.ts, fixed-discount-order-item.ts, percentage-discount-order-item.ts, shipping-order-item.ts и main.ts должны быть в одной директории;
3 - Скомпилировать: Откройте терминал в этой директории и выполните команду `tsc main.ts`;
4 - Run: Выполните файл JavaScript: `node main.js`.
*/
