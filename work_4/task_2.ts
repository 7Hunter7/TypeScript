// Задание 2. Наследование, абстрактные классы, геттеры и сеттеры
/*
Что нужно сделать:
- Создайте классы для товара и покупки, добавьте поля, методы и реализуйте логику скидок и транспортных расходов. Затем создайте массив из шести заказов и выведите детализацию в консоль. Далее отсортируйте заказы и снова выведите детализацию.

- Создайте базовый класс Product, который будет описывать товар и содержать поля с названием товара и его стоимости в рублях.
- Реализуйте поля в классе Product с помощью геттеров и сеттеров.
- Реализуйте метод log() в классе Product, который будет выводить параметры класса в консоль с разделителем «;».
- Создайте абстрактный базовый класс OrderItem, который будет описывать покупку товара и содержать поле с товаром и количеством заказанных единиц этого товара.
- Реализуйте поля в классе OrderItem с помощью геттеров и сеттеров.
- Реализуйте метод log() в классе OrderItem, который будет выводить параметры класса в консоль с разделителем «;». -Обратите внимание, что вам необходимо делегировать вывод информации о заказе классу Product.
- Реализуйте абстрактный метод getCost() в классе OrderItem, который будет возвращать стоимость заказа.
- Реализуйте метод compare(other: OrderItem), который будет сравнивать заказы и возвращать −1, 0 или 1 для сортировки.
- Реализуйте первый производный класс от OrderItem, который будет содержать скидку в цене (статическая скидка, например, 50 рублей). Реализуйте необходимые методы в этом классе так, чтобы скидка учитывалась корректно.
- Реализуйте второй производный класс от OrderItem, который будет содержать процент скидки и требования по количеству товара для применения скидки. Реализуйте методы в этом классе так, чтобы скидка учитывалась корректно и применялась только в случае, если в заказе содержится необходимое количество товара (более или равно 15) для применения скидки.
- Реализуйте третий производный класс от OrderItem, который будет содержать в себе транспортные расходы, указываемые на каждую единицу товара. Реализуйте методы в этом классе так, чтобы транспортные расходы учитывались корректно.
- Создайте массив из шести заказов с использованием разных классов: два первого типа, два второго типа, два третьего типа.
- Выведите детализацию заказов в консоль с помощью метода log().
- Отсортируйте заказы по убыванию с помощью метода compare(other).
- Выведите детализацию заказов в консоль с помощью метода log().

Примеры расчёта стоимости в подклассах:
Пусть скидка в цене — 50, цена — 300, количество — 2. Тогда стоимость равна (300 − 50) * 2 = 500.
Пусть процент скидки — 5,825, цена — 500, количество — 20, количество, которое надо превысить, — 15. Так как 20 ≥ 15, стоимость равна 500 * 20 * (1 − 5,825/100) = 9418 (стоимость по-прежнему целая).

Советы и рекомендации:
- Для каждого класса используйте отдельный .ts-файл. Хороший тон, когда название файла совпадает с именем класса внутри.
- Поэкспериментируйте с наследованием, чтобы кода было как можно меньше.
- Подкласс в имени должен содержать имя или по крайней мере ключевое слово суперкласса. Как правило, ключевое слово последнее.
- Подклассы не должны изменять поля базового класса. Можно вводить новые поля и переопределять методы.
*/
